rm(list=ls())

setwd("/Users/ousmanediallo/Box/NU-malaria-team/data/guinea_dhs/data_analysis")

#setwd("~/Box/NU-malaria-team/data/nigeria_dhs/data_analysis")

#install.packages("devtools") #download devtools if is not available in your packages 
#devtools::install_github("hadley/tidyverse")
### Reading in the necessary libraries 
x <- c("tidyverse", "survey", "haven", "ggplot2", "purrr", "summarytools", "stringr", "sp", "rgdal", "raster",
       "lubridate", "RColorBrewer","sf", "shinyjs", "tmap", "knitr", "labelled", "plotrix","rlang", "arules", "foreign")

lapply(x, library, character.only = TRUE) #applying the library function to packages

options(survey.lonely.psu="adjust") # this option allows admin units with only one cluster to be analyzed

# require(pacman)
# p_unlock()

source("src/Fonctions_nettoyage.R")



##############################################################################################
# --- reading and cleaning the datasets --- #
#############################################################################################
# MICS datasets 

# MICS_NGA <- read_sav("data/MICS/Nigeria MICS5 Datasets/Nigeria MICS 2016-17 SPSS Datasets/ch.sav")
# look_for(MICS_NGA, "fever")
# val_labels(MICS_NGA)
# table(MICS_NGA$CA13E)
# 
# MICS_HH_NGA <- read_sav("data/MICS/Nigeria MICS5 Datasets/Nigeria MICS 2016-17 SPSS Datasets/hh.sav")
# look_for(MICS_HH_NGA)
# table(MICS_HH_NGA$HH6)
# val_labels(MICS_HH_NGA$HH7)
# 
# HH_MICS <- 

# DHS datasets 
GNfiles<-read.files(".*GNIR.*\\.DTA", ".*GNKR.*\\.DTA", ".*GNPR.*\\.DTA")



# NGAfiles_2<-read.files(".*NGIR.*\\.DTA", ".*NGKR.*\\.DTA", ".*NGHR.*\\.DTA") # reads in a different combination of files to be used for IRS analysis 


# cluster locations 
GNshpfiles <- list.files(pattern="*FL.*\\.shp$", full.names=TRUE, recursive=T)

GNshplist <- sapply(GNshpfiles,shapefile, simplify = F)

GNshplist_sf <- map(GNshplist, st_as_sf)

# LGA shape file 

LGAshp <- readOGR("data/guinea_shapefiles/Guinea_Health_District", use_iconv=TRUE, encoding= "UTF-8")

LGAshp_sf <- st_as_sf(LGAshp)

head(LGAshp_sf)

#admin 1 shapefile 

admin1shp <- readOGR("bin/NGA_cnty_admin1", layer ="nga_polbnda_adm1_1m_salb", use_iconv=TRUE, encoding= "UTF-8")

admin1shp_sf <- st_as_sf(admin1shp) %>% mutate(ADM1_NAME = dplyr::recode(ADM1_NAME,"Federal Capital Territory" = "Fct Abuja",
                                                                         "Akwa lbom" = "Akwa Ibom" ))
head(admin1shp_sf)


#checking to see if cluster points into admin boundary 

# raw.plot.fun(LGAshp, NGAshplist[[1]], "1990 Admin boundary")
# raw.plot.fun(LGAshp, NGAshplist[[2]], "2003 Admin boundary")
# raw.plot.fun(LGAshp, NGAshplist[[3]], "2008 Admin boundary")
# raw.plot.fun(LGAshp, NGAshplist[[4]], "2010 Admin boundary")
# raw.plot.fun(LGAshp, NGAshplist[[5]], "2013 Admin boundary")
# raw.plot.fun(LGAshp, NGAshplist[[6]], "2015 Admin boundary")
# raw.plot.fun(LGAshp, NGAshplist[[7]], "2018 Admin boundary")

# code to read in representative archetypes

rep_DS <- read.csv("bin/representative_DS_orig60clusters.csv")
rep_LGA <- read.csv("bin/rep_LGA.csv")
rep_LGA_state <- rep_LGA %>% left_join(LGAshp_sf)
head(rep_LGA_state)

admin1_map <- tmap.fun5(admin1shp_sf, "States", "ADM1_NAME")

#map
# rep_DS_LGA <- LGAshp_sf %>% left_join(rep_DS)
# head(rep_DS_LGA)

# rep_map <- tmap.fun4(rep_DS_LGA, "Representative DS", "color_bar", "repDS", col_vector)
# 
# color = grDevices::colors()[grep('gr(a|e)y', grDevices::colors(), invert = T)]
# 
# 
# library(RColorBrewer)
# n <- 22
# qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
# col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
# 
# 
# color_22 <- color[9:20]
# 
# library(randomcoloR)
# n <- 22
# palette <- distinctColorPalette(n)
# 
# display.brewer.all()
# 
# colors_n <- palette(rainbow(22))
# 
# 
# install.packages("viridis")
# library(viridis)
# new_col <- viridis_pal(option = "D")(22)
# 

# code to search through labels for specific names 

# look_for(NGAfiles[[19]], "antenatal")

# check <- NGAfiles[[18]] %>% dplyr::select(sh13, hv105, sh225, sh14, sh15)
# 
# tail(check)

# table(NGAfiles[[18]][, "sh225"])
# 
# table(NGAfiles[[17]][, "ml13e"])



##################################################################################################
#  --- Mapping points to inherit associated health district  --- #
##################################################################################################


key_list <- map(GNshplist, over.fun)

key_list[[1]]$v001<-GNshplist[[1]]@data[,"DHSCLUST"] #1999 
key_list[[2]]$v001<-GNshplist[[2]]@data[,"DHSCLUST"] #2005
key_list[[3]]$v001<-GNshplist[[3]]@data[,"DHSCLUST"] #2012 
key_list[[4]]$v001<-GNshplist[[4]]@data[,"DHSCLUST"] #2018 
#key_list[[5]]$v001<-NGAshplist[[5]]@data[,"DHSCLUST"] #2013 
#key_list[[6]]$v001<-NGAshplist[[6]]@data[,"DHSCLUST"] #2015 



#key_list[[7]]$v001<-NGAshplist[[7]]@data[,"DHSCLUST"] #2018 


#source_zone <- svyby(~ANC, by=~NAME_2, design=ANC.svyd14, FUN=svymean, na.rm=TRUE, vartype = c('ci'))

#data%>%drop_na(var)%>%dplyr::select(hv001, num_p)%>%group_by(hv001) %>% summarise_each(funs(mean, sd, std.error, n()))

